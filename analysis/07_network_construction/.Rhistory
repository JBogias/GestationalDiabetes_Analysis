library(magrittr)
renv::init(bioconductor = TRUE)
renv::snapshot()
library(rmarkdown)
library(rmdformats)
library(dplyr)
library(readr)
library(tibble)
library(magrittr)
library(WGCNA)
library(here)
renv::install("WGCNA")
install.packages("WGCNA")
library(WGCNA)
renv::init(bioconductor = TRUE)
renv::install("impute")
renv::init(bioconductor = )
library(WGCNA)
library(rmarkdown)
library(rmdformats)
library(dplyr)
library(readr)
library(tibble)
library(magrittr)
library(WGCNA)
library(here)
install.packages("WGCNA")
renv::install("WGCNA")
install.packages("~/Documents/R_Projects/GDM/WGCNA_1.72-5.tar.gz", repos = NULL, type = "source")
renv::install("impute")
renv::install("BiocManager")
renv::install("WGCNA")
BiocManager::install("impute")
renv::install("WGCNA")
BiocManager::install("AnnotationDbi")
renv::snapshot()
renv::snapshot()
renv::snapshot()
library(WGCNA)
renv::install("WGCNA")
renv::deactivate()
renv::init(bioconductor = TRUE)
library(WGCNA)
renv::snapshot()
library(WGCNA)
library(rmarkdown)
library(rmdformats)
library(dplyr)
library(readr)
library(tibble)
library(magrittr)
library(WGCNA)
library(here)
library(rmarkdown)
library(rmdformats)
library(dplyr)
library(readr)
library(tibble)
library(magrittr)
library(WGCNA)
library(here)
placenta_data <- read_csv(here("data/placenta_data_wgcna.csv")) %>%
column_to_rownames("sample_id")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Chunk 2
library(rmarkdown)
library(rmdformats)
library(dplyr)
library(readr)
library(tibble)
library(magrittr)
library(WGCNA)
library(here)
placenta_data <- read_csv(here("data/placenta_data_wgcna.csv")) %>%
column_to_rownames("sample_id")
# Chunk 3: soft_power
set.seed(1201)
powers <- 1:20
sftList <- pickSoftThreshold(placenta_data,
powerVector = powers,
verbose = 0,
networkType = "signed",
RsquaredCut = 0.87)
sftList$fitIndices %>%
mutate(across(where(is.numeric), ~ round(., 3)))
ggplot(sftList$fitIndices,
mapping = aes(x = Power,
y = SFT.R.sq,
color = "red")) +
geom_point(colour = "blue") +
geom_smooth(colour = "blue",
se = FALSE,
linetype = "dashed") +
geom_hline(yintercept = 0.8736,
colour = "red") +
xlab("Soft Threshold (power)") +
ylab("Scale Free Topology Model Fit, signed R^2") +
ggtitle("Scale independence") +
theme_bw() +
guides(color = "none")
library(ggplot2)
renv::install("ggplot2")
renv::snapshot()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Chunk 2
library(rmarkdown)
library(rmdformats)
library(ggplot2)
library(dplyr)
library(readr)
library(tibble)
library(magrittr)
library(WGCNA)
library(here)
placenta_data <- read_csv(here("data/placenta_data_wgcna.csv")) %>%
column_to_rownames("sample_id")
# Chunk 3: soft_power
set.seed(1201)
powers <- 1:20
sftList <- pickSoftThreshold(placenta_data,
powerVector = powers,
verbose = 0,
networkType = "signed",
RsquaredCut = 0.87)
sftList$fitIndices %>%
mutate(across(where(is.numeric), ~ round(., 3)))
ggplot(sftList$fitIndices,
mapping = aes(x = Power,
y = SFT.R.sq,
color = "red")) +
geom_point(colour = "blue") +
geom_smooth(colour = "blue",
se = FALSE,
linetype = "dashed") +
geom_hline(yintercept = 0.8736,
colour = "red") +
xlab("Soft Threshold (power)") +
ylab("Scale Free Topology Model Fit, signed R^2") +
ggtitle("Scale independence") +
theme_bw() +
guides(color = "none")
ggplot(sftList$fitIndices,
mapping = aes(x = Power,
y = median.k.,
color = "red")) +
geom_point() +
geom_hline(yintercept = 100,
colour = "blue") +
theme_bw() +
guides(color = "none") +
xlab("Soft Threshold (power)") +
ylab("Mean Connectivity") +
ggtitle("Mean connectivity")
# Chunk 4: TOM_matrix
set.seed(1201)
soft_power <- sftList$powerEstimate
dissTOM <- (1 - (adjacency(placenta_data,
power = soft_power,
type = "signed") %>%
TOMsimilarity(TOMType = "signed")))
geneTree <- dissTOM %>%
as.dist() %>%
hclust(method = "average")
minModuleSize <- 40
dynamicMods <- cutreeHybrid(dendro = geneTree,
distM = dissTOM,
minClusterSize = minModuleSize,
deepSplit = 1,
pamStage = FALSE,
verbose = 0)
dynamicColors <- labels2colors(dynamicMods$labels)
#rm(dissTOM)
# Chunk 5: module_eigengenes_thresholds
MEigen <- moduleEigengenes(placenta_data,
colors = dynamicColors)
MEDiss <- (1 - cor(MEigen$eigengenes))
METree <- MEDiss %>%
as.dist() %>%
hclust(method = "average")
MEDissThres = 0.20
sizeGrWindow(7, 6)
plot(METree,
main = "Clustering of Placenta modules",
xlab = "",
sub = "")
abline(h = MEDissThres,
col = "red")
# Chunk 6: cluster_dendogram
merged_modules <- mergeCloseModules(placenta_data,
dynamicColors,
cutHeight = 0.20,
verbose = 3)
merged_modules$newMEs %>%
as.data.frame() %>%
rownames_to_column(var = "ID") %>%
as_tibble() %>%
write_csv(here("data/module_eigengenes.csv"))
merged_modules$colors %>%
write_rds(here("data/mergedColours.rds"))
merged_modules$colors
mergedColours <- merged_modules$colors
plotDendroAndColors(geneTree,
cbind(dynamicColors,
mergedColours),
c("Dynamic Tree Cut",
"Merged dynamic"),
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05,
abHeight = 0.8,
abCol = "red")
sftList
sftList$fitIndices$Power
sftList$powerEstimate
