renv::install("renv")
renv::init(bioconductor = TRUE)
renv::status()
renv::snapshot()
library(dplyr)
library(readr)
library(tibble)
library(WGCNA)
library(DESeq2)
renv::install("edgeR")
library(DESeq2)
renv::install("DESeq2")
library(DESeq2)
BiocManager::install("DESeq2")
BiocManager::install("DESeq2", force = TRUE)
library(DESeq2)
library(DESeq2)
renv::snapshot()
renv::restore()
library(dplyr)
library(readr)
library(tibble)
library(WGCNA)
library(edgeR)
library(DESeq2)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(here)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(dplyr)
library(readr)
library(tibble)
library(WGCNA)
library(edgeR)
library(DESeq2)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(here)
source(here("R/tx_aggregate_gene.R"))
# Chunk 3
filterCounts <- function(x, minCPM = 2, minSamp = 23) {
require(edgeR)
cpm <- cpm(x)
i <- rowSums(cpm > minCPM) > minSamp
return(x[i,])
}
# Chunk 4
tx_counts <- read_csv(here("data/tx_counts.csv"))
gene_txp_anno <- read_csv(here("data/gene_txp_anno.csv.gz"))
pd <- read_csv(here("data/metadata.csv"))
# Chunk 5
gene_counts <- tx_aggregate_gene(counts = tx_counts,
anno = gene_txp_anno) %>%
round(0)
# Chunk 6
gene_anno <- gene_txp_anno %>%
dplyr::filter(type == "gene") %>%
dplyr::select(-transcript_id,
-transcript_name,
-type) %>%
mutate(
region_key = paste0(
chromosome, ":", start, "-", end, ":", strand
)
)
# Chunk 7: define_models
mmformula_design <- formula(
~ Outcome +
FetalSex +
Cohort
)
# Chunk 8
mmformula_traits <- formula(
~0 +
Outcome +
BMI +
Age +
GestationalAge +
Birthweight +
Treatment +
metabolicSyndrome +
Ethnicity_Simplified
)
traits_colnames <- c(
"GDM",
"Uncomplicated",
"BMI",
"MaternalAge",
"GestationalAge",
"Birthweight",
"Medicated",
"Diet-Exercise",
"metabolicSyndrome",
"Ethnicity"
)
# Chunk 9: DESeq2
design <- model.matrix(
mmformula_design,
data = pd
)
ddsMat <- gene_counts %>%
DESeqDataSetFromMatrix(
pd,
design = design
) %>%
filterCounts(
minCPM = 1,
minSamp = 23
) %>%
DESeq() %>%
getVarianceStabilizedData()
rm(gene_counts)
# Chunk 10: FilterVariableGenes
FilterVariableGeneFunction <- function(x) {
variableGenes <- rowSds(x) > quantile(rowSds(x), 0.3)
finalXGenesMatrix <- x[variableGenes, ]
return(finalXGenesMatrix)
}
placenta_data <- ddsMat %>%
FilterVariableGeneFunction() %>%
t()
rm(ddsMat)
# Chunk 11: remove_haplotypes
gene_entrez_anno <- gene_txp_anno %>%
dplyr::filter(type == "gene") %>%
as_tibble() %>%
dplyr::select("gene_id",
"gene_name",
"gene_biotype",
"chromosome",
"length") %>%
unique() %>%
dplyr::filter(gene_id %in% colnames(placenta_data)) %>%
left_join(
AnnotationDbi::select(org.Hs.eg.db,
keys = unique(.$gene_name),
columns = c("ENTREZID", "SYMBOL"),
keytype = "SYMBOL") %>%
dplyr::rename("gene_name" = "SYMBOL",
"entrezgene" = "ENTREZID" )
) %>%
dplyr::filter(!entrezgene %in% "100124696") %>%
dplyr::filter(!str_detect(chromosome, "^H|^G"))
renv::install("stringr")
renv::snapshot()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(dplyr)
library(readr)
library(tibble)
library(stringr)
library(WGCNA)
library(edgeR)
library(DESeq2)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(here)
source(here("R/tx_aggregate_gene.R"))
# Chunk 3
filterCounts <- function(x, minCPM = 2, minSamp = 23) {
require(edgeR)
cpm <- cpm(x)
i <- rowSums(cpm > minCPM) > minSamp
return(x[i,])
}
# Chunk 4
tx_counts <- read_csv(here("data/tx_counts.csv"))
gene_txp_anno <- read_csv(here("data/gene_txp_anno.csv.gz"))
pd <- read_csv(here("data/metadata.csv"))
# Chunk 5
gene_counts <- tx_aggregate_gene(counts = tx_counts,
anno = gene_txp_anno) %>%
round(0)
# Chunk 6
gene_anno <- gene_txp_anno %>%
dplyr::filter(type == "gene") %>%
dplyr::select(-transcript_id,
-transcript_name,
-type) %>%
mutate(
region_key = paste0(
chromosome, ":", start, "-", end, ":", strand
)
)
# Chunk 7: define_models
mmformula_design <- formula(
~ Outcome +
FetalSex +
Cohort
)
# Chunk 8
mmformula_traits <- formula(
~0 +
Outcome +
BMI +
Age +
GestationalAge +
Birthweight +
Treatment +
metabolicSyndrome +
Ethnicity_Simplified
)
traits_colnames <- c(
"GDM",
"Uncomplicated",
"BMI",
"MaternalAge",
"GestationalAge",
"Birthweight",
"Medicated",
"Diet-Exercise",
"metabolicSyndrome",
"Ethnicity"
)
# Chunk 9: DESeq2
design <- model.matrix(
mmformula_design,
data = pd
)
ddsMat <- gene_counts %>%
DESeqDataSetFromMatrix(
pd,
design = design
) %>%
filterCounts(
minCPM = 1,
minSamp = 23
) %>%
DESeq() %>%
getVarianceStabilizedData()
rm(gene_counts)
# Chunk 10: FilterVariableGenes
FilterVariableGeneFunction <- function(x) {
variableGenes <- rowSds(x) > quantile(rowSds(x), 0.3)
finalXGenesMatrix <- x[variableGenes, ]
return(finalXGenesMatrix)
}
placenta_data <- ddsMat %>%
FilterVariableGeneFunction() %>%
t()
rm(ddsMat)
# Chunk 11: remove_haplotypes
gene_entrez_anno <- gene_txp_anno %>%
dplyr::filter(type == "gene") %>%
as_tibble() %>%
dplyr::select("gene_id",
"gene_name",
"gene_biotype",
"chromosome",
"length") %>%
unique() %>%
dplyr::filter(gene_id %in% colnames(placenta_data)) %>%
left_join(
AnnotationDbi::select(org.Hs.eg.db,
keys = unique(.$gene_name),
columns = c("ENTREZID", "SYMBOL"),
keytype = "SYMBOL") %>%
dplyr::rename("gene_name" = "SYMBOL",
"entrezgene" = "ENTREZID" )
) %>%
dplyr::filter(!entrezgene %in% "100124696") %>%
dplyr::filter(!str_detect(chromosome, "^H|^G"))
write_csv(gene_entrez_anno, here("data/gene_extrez_anno.csv.gz"))
# Chunk 12: check_protein_coding
gene_entrez_anno %>%
dplyr::filter(gene_id %in% colnames(placenta_data)) %>%
dplyr::select(gene_biotype) %>%
table()
# Chunk 13: remove_protein_coding
proteingenes <- gene_anno %>%
dplyr::filter(gene_id %in% colnames(placenta_data) &
gene_biotype == "protein_coding") %>%
dplyr::select(gene_id) %>%
as.matrix() %>%
as.character()
placenta_data %>%
as.data.frame() %>%
rownames_to_column(var = "sample_id") %>%
as_tibble() %>%
write_csv(here("data/placenta_data_wgcna.csv"))
renv::install("rmdformats")
library(rmdformats)
renv::snapshot()
library(rmarkdown)
library(WGCNA)
